#+TITLE: RNA-seq Report
#+OPTIONS: toc:nil H:4 ^:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage[margin=0.8in]{geometry}
#+LaTeX_HEADER: \usepackage{amssymb,amsmath}
#+LaTeX_HEADER: \usepackage{fancyhdr}
#+LaTeX_HEADER: \pagestyle{fancy}
#+LaTeX_HEADER: \usepackage{lastpage}
#+LaTeX_HEADER: \usepackage{float}
#+LaTeX_HEADER: \restylefloat{figure}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \usepackage{tabularx}
#+LaTeX_HEADER: \hypersetup{urlcolor=blue}
#+LaTex_HEADER: \usepackage{titlesec}
#+LaTex_HEADER: \setcounter{secnumdepth}{4}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{frame=single,framesep=10pt}
#+LaTeX_HEADER: \chead{}
#+LaTeX_HEADER: \rhead{\today}
#+LaTeX_HEADER: \cfoot{}
#+LaTeX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LaTeX_HEADER: \usepackage[parfill]{parskip}
#+LaTeX_HEADER:\usepackage{subfig}
#+LaTex_HEADER: \usepackage[sort&compress, numbers]{natbib}
#+LaTeX_HEADER: \hypersetup{colorlinks=true,linkcolor=black, citecolor=black}
#+LATEX_HEADER_EXTRA:  \usepackage{framed}
#+LATEX_HEADER_EXTRA: \usepackage{mathtools, cases}
#+LATEX: \maketitle
#+LATEX: \clearpage
#+LATEX: \tableofcontents
#+LATEX: \clearpage


* Data setup

** Helper funcs for pprinting

#+BEGIN_SRC ipython :session :exports results
  import tabulate
  import IPython

  class OrgFormatter(IPython.core.formatters.BaseFormatter):
      format_type = IPython.core.formatters.Unicode('text/org')
      print_method = IPython.core.formatters.ObjectName('_repr_org_')

  def pd_dataframe_to_org(df):
      return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

  ip = get_ipython()
  ip.display_formatter.formatters['text/org'] = OrgFormatter()

  f = ip.display_formatter.formatters['text/org']
  f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)

  print('Lets go!')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [540]:
# output
Lets go!

:END:


** Load up counts and DE
#+BEGIN_SRC ipython :session :exports results
  import pandas as pd
  import warnings
  warnings.filterwarnings('ignore')

  counts = pd.read_csv(
      "/Users/hughesn/Transcripts/RNA-Seq/Analysis/Data/norml_count_data.csv",
      index_col=0)
  xl = pd.ExcelFile(
      "/Users/hughesn/Transcripts/RNA-Seq/Analysis/Data/diff_from_col0:False_onlyDiff:False.xlsx")
  sheet_names = xl.sheet_names
  dfs = []
  for s in sheet_names:
      d = xl.parse(s)
      d['sample'] = s.split("|")[0].replace(" ", "")
      dfs.append(d)

  DE = pd.concat(dfs)
  DE = DE.rename_axis('gene').sort_values(by=['gene', 'log2FoldChange'],
                                          ascending=[False, False])
  print("Loaded data")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [541]:
# output
Loaded data

:END:

\clearpage
** Extracting gene names example

#+BEGIN_SRC ipython :session :display text/org :exports results
  from gprofiler import GProfiler

  def get_gene_names(geneList):

      gp = GProfiler(return_dataframe=True)
      df = gp.convert(organism='athaliana',
                 query=geneList)[['incoming', 'name', 'description']]
      df['description'] = df.apply(lambda x: x['description'].split('[')[0].split(';')[0], axis=1)
      return df

  get_gene_names(list(DE.sample(20).index))
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [542]:
# text/org
|    | incoming   | name      | description                                                            |
|----+------------+-----------+------------------------------------------------------------------------|
|  0 | AT1G73850  | AT1G73850 | Protein of unknown function (DUF1666)                                  |
|  1 | AT2G35210  | AGD10     | RPA                                                                    |
|  2 | AT5G23360  | AT5G23360 | GEM-like protein 7                                                     |
|  3 | AT3G04480  | AT3G04480 | Endoribonuclease                                                       |
|  4 | AT5G65165  | SDH2-3    | Succinate dehydrogenase                                                |
|  5 | AT2G08635  | AT2G08635 | None                                                                   |
|  6 | AT4G38810  | AT4G38810 | Calcium-binding EF-hand family protein                                 |
|  7 | AT3G63530  | BB        | BB2                                                                    |
|  8 | AT2G33000  | AT2G33000 | Ubiquitin-associated (UBA)/TS-N domain-containing protein-like protein |
|  9 | AT5G10336  | AT5G10336 | unknown protein                                                        |
| 10 | AT3G21620  | AT3G21620 | CSC1-like protein At3g21620                                            |
| 11 | AT3G17225  | AT3G17225 | Plant invertase/pectin methylesterase inhibitor superfamily protein    |
| 12 | AT2G30910  | ARPC1A    | Actin-related protein 2/3 complex subunit 1A                           |
| 13 | AT5G50520  | AT5G50520 | Major facilitator superfamily protein                                  |
| 14 | AT5G19590  | AT5G19590 | At5g19590                                                              |
| 15 | AT3G19190  | ATG2      | Autophagy-related protein 2                                            |
| 16 | AT5G01675  | AT5G01675 | None                                                                   |
| 17 | AT1G27040  | NPF4.5    | Protein NRT1/ PTR FAMILY 4.5                                           |
| 18 | AT3G49490  | AT3G49490 | Uncharacterized protein T9C5.90                                        |
| 19 | AT1G02890  | AT1G02890 | AAA-type ATPase family protein                                         |
:END:

\clearpage

* Inspect Samples

** Creating a distance map of samples using normalised counts


*** Samples separated

#+BEGIN_SRC ipython :session :ipyfile '((:name "distancemap" :filename "obipy-resources/distancemap.png" :caption "Distance map between samples" :attr_html ":width 850px" :attsr_latex ":width 15cm")) :exports results
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.spatial.distance import pdist, squareform

distances = pdist(counts.T.values, metric='euclidean')
dist_matrix = squareform(distances)
dist_df = pd.DataFrame(dist_matrix, columns = counts.columns, index=counts.columns)

sns.clustermap(dist_df)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [543]:


# text/plain
: <Figure size 720x720 with 4 Axes>

# image/png
#+attr_html: :width 850px
#+caption: Distance map between samples
#+name: distancemap
[[file:obipy-resources/distancemap.png]]
:END:

*** Samples together

#+BEGIN_SRC ipython :session :ipyfile '((:name "distancemappooled" :filename "obipy-resources/distancemap_together.png" :caption "Distance map between samples, pooled together " :attr_html ":width 850px" :attr_latex ":width 15cm")) :exports results
import matplotlib.patches as mpatches

def collapse_counts(counts):
    u_cols = list(set([l.rsplit("_", 1)[0] for l in list(counts.columns)]))
    cols = list(counts.columns)
    ss = []
    for uc in u_cols:
        cs = [c for c in cols if c.startswith(uc)]
        ss.append(counts[cs].sum(axis=1).rename(uc))
    dc = pd.concat(ss, axis=1)
    return dc


collapsed_counts = collapse_counts(counts)
lut = dict(zip(list(set([c[:3] for c in collapsed_counts.columns])), "rbg"))
row_colors = [lut[c[:3]] for c in collapsed_counts.columns]
#legend_TN = [mpatches.Patch(color=c, label=l) for (list(set([c[:3] for c in collapsed_counts.columns]))]

distances = pdist(collapsed_counts.T.values, metric='euclidean')
dist_matrix = squareform(distances)
dist_df = pd.DataFrame(dist_matrix, columns = collapsed_counts.columns, index=collapsed_counts.columns)
sns.clustermap(dist_df, row_colors=row_colors)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [551]:


# text/plain
: <Figure size 720x720 with 5 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: Distance map between samples, pooled together
#+name: distancemappooled
[[file:obipy-resources/distancemap_together.png]]
:END:

* Simple Analysis

** Largest/Lowest expression sum

#+BEGIN_SRC ipython :session :ipyfile '((:name "largest" :filename "obipy-resources/large.png" :caption "Largest and least DE genes, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control" :attr_html ":width 850px" :attr_latex ":width 15cm"))  :exports results


  locs = DE[['log2FoldChange']].groupby(['gene']).sum().sort_values(by='log2FoldChange',
                                                                    ascending=False).head(30).index.values
  top = DE.loc[locs]
  top = top.pivot(columns='sample', values='log2FoldChange')

  locs = DE[['log2FoldChange']].groupby(['gene']).sum().sort_values(by='log2FoldChange',
                                                                    ascending=True).head(30).index.values
  bot = DE.loc[locs]
  bot = bot.pivot(columns='sample', values='log2FoldChange')

  both = pd.concat([top,bot])
  both['col_w_05h'] = 0

  both['gene name'] = list(get_gene_names(list(both.index.values))['description'])
  both = both.set_index('gene name')

  sns.clustermap(both, cmap='bwr', vmin=-10, vmax=10)


#+END_SRC

#+RESULTS:
:RESULTS:
# Out [545]:


# text/plain
: <Figure size 720x720 with 4 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: Largest and least DE genes, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control
#+name: largest
[[file:obipy-resources/large.png]]
:END:

** Largest/Lowest TF expression

#+BEGIN_SRC ipython :session :exports results
  tfs = get_gene_names(list(DE.index.values))
  s_tfs = tfs[tfs['description'].str.contains('transcription factor')]
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [546]:
:END:


#+BEGIN_SRC ipython :session :ipyfile '((:name "tfs" :filename "obipy-resources/tfs.png" :caption "Largest and least DE TFs, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control" :attr_html ":width 850px" :attr_latex ":width 15cm")) :exports results


  locs = DE.loc[s_tfs['incoming']][['log2FoldChange']].groupby(['gene']).sum().sort_values(by='log2FoldChange',
                                                                    ascending=False).head(10).index.values
  top = DE.loc[locs]
  top = top.pivot(columns='sample', values='log2FoldChange')

  locs = DE.loc[s_tfs['incoming']][['log2FoldChange']].groupby(['gene']).sum().sort_values(by='log2FoldChange',
                                                                    ascending=True).head(10).index.values
  bot = DE.loc[locs]
  bot = bot.pivot(columns='sample', values='log2FoldChange')

  both = pd.concat([top,bot])
  both['col_w_05h'] = 0

  both['gene name'] = list(get_gene_names(list(both.index.values))['description'])
  both = both.set_index('gene name')

  sns.clustermap(both, cmap='bwr', vmin=-10, vmax=10)


#+END_SRC

#+RESULTS:
:RESULTS:
# Out [547]:


# text/plain
: <Figure size 720x720 with 4 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: Largest and least DE TFs, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control
#+name: tfs
[[file:obipy-resources/tfs.png]]
:END:



** Largest/Lowest deviation in log2foldchanges

#+BEGIN_SRC ipython :session :ipyfile '((:name "largest" :filename "obipy-resources/deviation.png" :caption "Largest and least std DE genes, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control" :attr_html ":width 850px" :attr_latex ":width 15cm")) :exports results


  locs = DE[['log2FoldChange']].groupby(['gene']).apply(lambda x: np.std(x)).sort_values(by='log2FoldChange',
                                                                    ascending=False).head(30).index.values
  top = DE.loc[locs]
  top = top.pivot(columns='sample', values='log2FoldChange')

  both = pd.concat([top])
  both['col_w_05h'] = 0

  both['gene name'] = list(get_gene_names(list(both.index.values))['description'])
  both = both.set_index('gene name')

  sns.clustermap(both, cmap='bwr', vmin=-10, vmax=10)


#+END_SRC

#+RESULTS:
:RESULTS:
# Out [548]:


# text/plain
: <Figure size 720x720 with 4 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: Largest and least std DE genes, values given are log2 fold changes /i.e a change of -1 is equivalent to $2^{-1}$ or 0.5 the amount of control
#+name: largest
[[file:obipy-resources/deviation.png]]
:END:

** PCA on count data

#+BEGIN_SRC ipython :session :ipyfile '((:name "pca" :filename "obipy-resources/pca.png" :caption "PCA of sample counts" :attr_html ":width 850px" :attr_latex ":width 15cm")) :exports results
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
sns.set()

cols = list(counts.columns)

counts_geno = [c.split("_")[0] for c in cols]
counts_treat = [c.split("_")[1] for c in cols]
counts_time = [c.split("_")[2] for c in cols]

x = (counts.T.values)

pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data=principalComponents, columns=[
                           'principal component 1', 'principal component 2'])

principalDf['genotype'] = counts_geno
principalDf['treatment'] = counts_treat
principalDf['time'] = counts_time

g = sns.FacetGrid(principalDf, col='time', row='genotype', hue='treatment')

g = g.map(plt.scatter, 'principal component 1',
          'principal component 2').add_legend()

print("Explained varience from PC1 & 2 respectively:")
print(pca.explained_variance_ratio_)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [549]:
# output
Explained varience from PC1 & 2 respectively:
[0.54031803 0.14242627]

# text/plain
: <Figure size 483.925x648 with 6 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: PCA of sample counts
#+name: pca
[[file:obipy-resources/pca.png]]
:END:

\clearpage

** PCA on expression data

#+BEGIN_SRC ipython :session :ipyfile '((:name "pca_both" :filename "obipy-resources/pca_minmax.png" :caption "PCA of sample min, max expression" :attr_html ":width 850px" :attr_latex ":width 15cm")) :exports results
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
sns.set()

cols = list(both.columns)

counts_geno = [c.split("_")[0] for c in cols]
counts_treat = [c.split("_")[1] for c in cols]
counts_time = [c.split("_")[2] for c in cols]

x = (both.T.values)

pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data=principalComponents, columns=[
                           'principal component 1', 'principal component 2'])

principalDf['genotype'] = counts_geno
principalDf['treatment'] = counts_treat
principalDf['time'] = counts_time

g = sns.FacetGrid(principalDf, col='time', row='genotype', hue='treatment')

g = g.map(plt.scatter, 'principal component 1',
          'principal component 2').add_legend()

print("Explained varience from PC1 & 2 respectively:")
print(pca.explained_variance_ratio_)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out [550]:
# output
Explained varience from PC1 & 2 respectively:
[0.77401765 0.14661658]

# text/plain
: <Figure size 483.925x648 with 6 Axes>

# image/png
#+attr_html: :width 850px
#+attr_latex: :width 15cm
#+caption: PCA of sample min, max expression
#+name: pca_both
[[file:obipy-resources/pca_minmax.png]]
:END:
